{"version":3,"sources":["Form.js","ListOfMessage.js","api.js","App.js","serviceWorker.js","index.js"],"names":["Form","addMessage","useState","name","setName","message","setMessage","onSubmit","event","preventDefault","type","value","placeholder","required","onChange","target","ListOfMessage","data","map","id","key","URL_API","getMessageFromServer","a","fetch","response","json","addMessageToServer","method","headers","body","JSON","stringify","App","setData","useEffect","refreshMessage","console","log","then","Date","now","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"kPA+CeA,G,MA7CF,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACPC,mBAAS,IADF,mBACxBC,EADwB,KAClBC,EADkB,OAEDF,mBAAS,IAFR,mBAExBG,EAFwB,KAEfC,EAFe,KAY/B,OACE,0BAAMC,SATY,SAACC,GACnBA,EAAMC,iBAENR,EAAWE,EAAME,GACjBD,EAAQ,IACRE,EAAW,MAMT,sCAEE,2BACEI,KAAK,OACLC,MAAOR,EACPS,YAAY,gBACZC,UAAQ,EACRC,SAAU,SAACN,GAAD,OAAWJ,EAAQI,EAAMO,OAAOJ,WAI9C,6BAEA,6CAEE,8BACED,KAAK,OACLC,MAAON,EACPQ,UAAQ,EACRD,YAAY,mBACZE,SAAU,SAACN,GAAD,OAAWF,EAAWE,EAAMO,OAAOJ,WAIjD,4BAAQD,KAAK,UAAb,mBCxBSM,EAfO,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACE,oCACE,4BACGA,EAAKC,KAAI,gBAAGC,EAAH,EAAGA,GAAIhB,EAAP,EAAOA,KAAME,EAAb,EAAaA,QAAb,OACR,yBAAKe,IAAKD,GACR,sCAAYhB,GACZ,yCAAeE,UCRrBgB,EAAU,gDAEHC,EAAoB,uCAAG,4BAAAC,EAAA,sEACXC,MAAMH,GADK,cAC5BI,EAD4B,yBAE3BA,EAASC,QAFkB,2CAAH,qDAMpBC,EAAkB,uCAAG,WAAOR,EAAIhB,EAAME,GAAjB,iBAAAkB,EAAA,6DAC1BN,EAAO,CAACE,KAAIhB,OAAME,WADQ,SAGTmB,MAAMH,EAAS,CACpCO,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UAAUf,KARS,cAG1BQ,EAH0B,yBAWzBA,EAASC,QAXgB,2CAAH,0DC8BhBO,EAjCH,WAAO,IAAD,EACQ/B,mBAAS,IADjB,mBACTe,EADS,KACHiB,EADG,KAGhBC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAc,uCAAG,sBAAAb,EAAA,6DACrBc,QAAQC,IAAI,gBADS,SAGfhB,IACHiB,MAAK,SAAAtB,GAAI,OAAIiB,EAAQjB,MAJH,2CAAH,qDAOdhB,EAAU,uCAAG,WAAOE,EAAME,GAAb,SAAAkB,EAAA,sEACXI,EAAmBa,KAAKC,MAAQ,GAAItC,EAAME,GAD/B,OAEjB+B,IACAC,QAAQC,IAAInC,EAAME,GAHD,2CAAH,wDAOhB,OACE,yBAAKqC,UAAU,OACb,6BAEE,kBAAC,EAAD,CAAMzC,WAAYA,IACjBgB,EAAO,kBAAC,EAAD,CAAeA,KAAMA,IAAW,oBCpB5B0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMtD,a","file":"static/js/main.93db801c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Form = ({ addMessage }) => {\n  const [name, setName] = useState('')\n  const [message, setMessage] = useState('')\n\n  const handlSubmit = (event) => {\n    event.preventDefault();\n\n    addMessage(name, message)\n    setName('')\n    setMessage('')\n  }\n\n  return (\n    <form onSubmit={handlSubmit}>\n\n      <label>\n        Name\n        <input\n          type=\"text\"\n          value={name}\n          placeholder=\"Put name here\"\n          required\n          onChange={(event) => setName(event.target.value)}\n        />\n      </label>\n      \n      <br />\n\n      <label>\n        Put message\n        <textarea\n          type=\"text\"\n          value={message}\n          required\n          placeholder=\"Put message here\"\n          onChange={(event) => setMessage(event.target.value)}\n        />\n      </label>\n\n      <button type=\"submit\">Send Message</button>\n\n    </form>\n  )\n}\n\nexport default Form","import React from 'react';\n\nconst ListOfMessage = ({ data }) => {\n  return (\n    <>\n      <ul>\n        {data.map(({ id ,name, message }) =>\n          <div key={id}>\n            <li>name : {name}</li>\n            <li>message : {message}</li>\n          </div>\n        )}\n      </ul>\n    </>\n  )\n}\n\nexport default ListOfMessage","// const URL_API = \"http://localhost:5000/api\";\nconst URL_API = \"https://salty-hollows-12205.herokuapp.com/api\";\n\nexport const getMessageFromServer = async () => {\n  const response = await fetch(URL_API);\n  return response.json();\n} \n\n\nexport const addMessageToServer = async (id, name, message,) => {\n  const data = {id, name, message, }\n\n  const response = await fetch(URL_API, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n\n  return response.json();\n}","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport ListOfMessage from './ListOfMessage';\nimport {getMessageFromServer, addMessageToServer} from './api'\n\nconst App = () => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    refreshMessage()\n  }, [])\n\n  const refreshMessage = async () => {\n    console.log(\"refreshFilms\")\n\n    await getMessageFromServer()\n      .then(data => setData(data))\n  }\n\n  const addMessage = async (name, message) => {\n    await addMessageToServer(Date.now() + '', name, message, )\n    refreshMessage()\n    console.log(name, message)\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n\n        <Form addMessage={addMessage} />\n        {data ? <ListOfMessage data={data} /> : 'data not found'}\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}