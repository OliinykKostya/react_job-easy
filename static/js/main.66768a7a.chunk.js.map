{"version":3,"sources":["components/Form/Form.js","components/ListOfMessages/ListOfMessages.js","api/api.js","components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Form","addMessage","useState","name","setName","message","setMessage","onSubmit","event","preventDefault","className","htmlFor","type","id","value","placeholder","required","onChange","target","trim","rows","ListOfMessage","data","map","key","URL_API","getMessageFromServer","a","fetch","response","json","addMessageToServer","method","headers","body","JSON","stringify","Spinner","class","role","App","setData","isLoading","setLoading","error","setError","useEffect","refreshMessage","then","catch","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.66768a7a.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Form = ({ addMessage }) => {\n  const [name, setName] = useState('')\n  const [message, setMessage] = useState('')\n\n  const handlSubmit = (event) => {\n    event.preventDefault();\n\n    addMessage(name, message)\n    setName('')\n    setMessage('')\n  }\n\n  return (\n    <form onSubmit={handlSubmit} className=\"form\">\n\n      <div className=\"form-group\">\n        <label htmlFor=\"exampleFormControlInput1\">Name</label>\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          id=\"exampleFormControlInput1\"\n          value={name}\n          placeholder=\"Put name here\"\n          required\n          onChange={(event) => setName(event.target.value.trim())}\n        />\n      </div>\n\n      <div className=\"form-group form__textarea\">\n        <label htmlFor=\"exampleFormControlTextarea1\">Put message</label>\n        <textarea\n          className=\"form-control\"\n          type=\"text\"\n          id=\"exampleFormControlTextarea1\"\n          rows=\"3\"\n          value={message}\n          required\n          placeholder=\"Put message here\"\n          onChange={(event) => setMessage(event.target.value)}\n        />\n      </div>\n\n      <button type=\"submit\" className=\"btn btn-info form__button\">Send Message</button>\n\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react';\n\nconst ListOfMessage = ({ data }) => (\n  \n  <ul className=\"list\">\n    {data.map(({ id, name, message }) =>\n      <div key={id} className=\"card list__card\" >\n        <h5 className=\"card-header list__card__h5\">{name}</h5>\n        <div className=\"card-body\">\n          <p className=\"card-text\">{message}</p>\n        </div>\n      </div>\n    )}\n  </ul>\n\n)\n\nexport default ListOfMessage\n","const URL_API = \"https://salty-hollows-12205.herokuapp.com/api\";\n\nexport const getMessageFromServer = async () => {\n  const response = await fetch(URL_API);\n  return response.json();\n} \n\nexport const addMessageToServer = async (id, name, message,) => {\n  const data = {id, name, message, }\n\n  const response = await fetch(URL_API, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n\n  return response.json();\n}\n","import React from 'react';\n\nconst Spinner = () => (\n  <div class=\"spinner-border text-info\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n)\n\nexport default Spinner","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport Form from './components/Form/Form';\nimport ListOfMessage from './components/ListOfMessages/ListOfMessages';\nimport { getMessageFromServer, addMessageToServer } from './api/api'\nimport Spinner from './components/Spinner/Spinner';\n\nconst App = () => {\n  const [data, setData] = useState([])\n  const [isLoading, setLoading] = useState(false)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    refreshMessage()\n  }, [])\n\n  const refreshMessage = async () => {\n    setLoading(true)\n    await getMessageFromServer()\n      .then(data => setData(data))\n      .catch(() => setError(true))\n    setLoading(false)\n  }\n\n  const addMessage = async (name, message) => {\n    await addMessageToServer(Date.now() + '', name, message,)\n    refreshMessage()\n  }\n\n  return (\n    <div className=\"App\" >\n      <div className=\"container__form\">\n        <Form addMessage={addMessage} />\n      </div>\n      <div className=\"container__list\">\n        {isLoading\n          ? <Spinner />\n          : error\n            ? <p>Error, Data was not find</p>\n            : <ListOfMessage data={data} />\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}